def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')
def allJarPaths = new LinkedList <String> ()

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
    }
}

apply plugin: "com.android.application"

def computeTargetSdkVersion() {
	if(project.hasProperty("targetSdk")) {
	
		return targetSdk
	}
	else {
		return 22
	}
}

android {
	compileSdkVersion 22
    buildToolsVersion "22.0.1"
	
	defaultConfig {
		minSdkVersion 17
		targetSdkVersion computeTargetSdkVersion()
	}
	
	sourceSets.main {
		//manifest is necessary to generate a BuildConfig.java file necessary for build
		manifest.srcFile "./AndroidManifest.xml"
		java.srcDir "src"
		res.srcDir "res"
		assets.srcDir "assets"
        jniLibs.srcDir "libs/jni"
    }
	
	signingConfigs {
        release {
            if(project.hasProperty("release")) {
				if(project.hasProperty("ksPath") &&
					project.hasProperty("ksPassword") &&
					project.hasProperty("alias") &&
					project.hasProperty("password"))
				{
					storeFile file(ksPath)
					storePassword ksPassword
					keyAlias alias
					keyPassword password
				}
			}
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
	
	applicationVariants.all { variant ->
		def tsk = variant.mergeAssets
		tsk.dependsOn(copyMetadata)
	}
}

def sdkPath = android.sdkDirectory.getAbsolutePath();

repositories {
    jcenter()
}

dependencies {
	def nativescriptJarPath = "$rootDir/libs/nativescript.jar"
	compile 'com.android.support:support-v4:22.2.0'
	compile files(nativescriptJarPath)
}

task cleanLibs (type: Delete) {
	delete "$rootDir/libs"
}

task copyLibNativescriptLibrary (type: Copy) {
	from "../dist/framework/libs"
	into "$rootDir/libs"
}

task collectAllJars {

	def explodedAarDir = project.buildDir.getAbsolutePath() + "/intermediates/exploded-aar/"
	def androidJar = sdkPath + "/platforms/" + android.compileSdkVersion + "/android.jar"
	
	doFirst {
		allJarPaths.add(androidJar);
		allJarPaths.add("$rootDir/metadata/libs/testapp.jar");
	
		def ft = fileTree(dir: explodedAarDir, include: "**/*.jar")
		ft.each { currentJarFile ->
			allJarPaths.add(currentJarFile.getAbsolutePath())
		}
		
		configurations.compile.each { File dependencyFile -> 
			allJarPaths.add(dependencyFile.getAbsolutePath())
		}
	}
}

task ensureMetadataOutDir {
	def outputDir = file("$rootDir/metadata/output")
	outputDir.mkdirs()
}

task buildMetadata(type: Exec) {
	outputs.upToDateWhen {		
		!collectAllJars.didWork
	}
	
	doFirst{
	
		workingDir "../dist/framework/build-tools"
		
		def str = new LinkedList <String> ();
		str.add("metadata-generator.jar")
		str.add("../../../test-app/metadata/output")

		for(def i = 0; i < allJarPaths.size(); i++) {
			str.add(allJarPaths.get(i));
		}

		if(isWinOs) {
			commandLine "cmd", "/c", "rmg.bat"
		}
		else{
			commandLine "./rmg.sh"
		}
		
		args str.toArray()
	}
}

task copyMetadata(type: Copy) {
	outputs.upToDateWhen {
		!buildMetadata.didWork
	}

	from "metadata/output"
	into "$rootDir/assets/metadata"
}

cleanLibs.dependsOn(clean)
copyLibNativescriptLibrary.dependsOn(cleanLibs)
preBuild.dependsOn(copyLibNativescriptLibrary)

ensureMetadataOutDir.dependsOn(collectAllJars)
buildMetadata.dependsOn(ensureMetadataOutDir)
copyMetadata.dependsOn(buildMetadata)

task buildapk {
	
	if(project.hasProperty("release")) {
		dependsOn assembleRelease
	}
	else {
		dependsOn assembleDebug
	}
}

//to be compatible with eclipse
task deleteLibsDir (type: Delete) {
	delete "$rootDir/libs"
}

task copySupportLibraryToLibs (type: Copy) {
	from "$sdkPath/extras/android/support/v4/android-support-v4.jar"
	into "$rootDir/libs"
}

task checkoutAssetsFolder (type: Exec) {
	if(isWinOs) {
		commandLine "cmd", "/c", "git", "checkout", "$rootDir/assets/metadata"
	}
	else {
		commandLine "git", "checkout", "$rootDir/assets/metadata"
	}
}

copySupportLibraryToLibs.dependsOn(deleteLibsDir)
checkoutAssetsFolder.dependsOn(copySupportLibraryToLibs)
buildapk.dependsOn(checkoutAssetsFolder)


///// install apk

task runJarProject (type: Exec) {
	println "---- jar project so metadata can be made for it"
	
	if(isWinOs) {
		commandLine "cmd", "/c", "gradle", "-b", "jarProject.gradle", "jarReleaseClasses", "copyJaredProject"
	}
	else {
		commandLine "gradle", "-b", "jarProject.gradle", "jarReleaseClasses", "copyJaredProject"
	}
}

task deleteDist (type: Delete) {
	doFirst {
		delete "$rootDir/dist"
	}
}

task installApk (type: Exec) {
	doFirst {
		println "---- attempting to install buit apk"
		
		if(isWinOs) {
			commandLine "cmd", "/c", "node", "$rootDir/tasks/deploy-apk.js", "$rootDir/build/outputs/apk/test-app-debug.apk"
		}
		else {
			commandLine "node", "$rootDir/tasks/deploy-apk.js", "$rootDir/build/outputs/apk/test-app-debug.apk"
		}
	}
}

task deletePreviousResultXml (type: Exec) {
	
	println "---- removing previous android_unit_test_results.xml"
	
	if(isWinOs) {
		commandLine "cmd", "/c", "adb", "shell", "rm", "-rf", "/sdcard/android_unit_test_results.xml"
	}
	else {
		commandLine "adb", "shell", "rm", "-rf", "/sdcard/android_unit_test_results.xml"
	}
}

task startInstalledApk (type: Exec) {
	doFirst {
		println "---- starting installed apk"
		
		if(isWinOs) {
			commandLine "cmd", "/c", "adb", "shell", "am", "start", "-n", "com.tns.android_runtime_testapp/com.tns.NativeScriptActivity", "-a", "android.intent.action.MAIN", "-c", "android.intent.category.LAUNCHER"
		}
		else {
			commandLine "adb", "shell", "am", "start", "-n", "com.tns.android_runtime_testapp/com.tns.NativeScriptActivity", "-a", "android.intent.action.MAIN", "-c", "android.intent.category.LAUNCHER"
		}
	}
}

task createDistFolder {
	doLast {
		def distDir = file("$rootDir/dist")
		distDir.mkdirs()
	}
}

task waitForUnitTestResultFile (type: Exec) {	
	doFirst {
		println "---- waiting for tests to finish and get file..."
		
		if(isWinOs) {
			commandLine "cmd", "/c", "node", "$rootDir/tasks/try_to_find_test_result_file.js"
		}
		else {
			commandLine "node", "$rootDir/tasks/try_to_find_test_result_file.js"
		}
	}
}

task copyResultToDist (type: Copy) {	
	from "$rootDir/android_unit_test_results.xml"
	into "$rootDir/dist"
	
}

task deleteRootLevelResult (type: Delete) {
	delete "$rootDir/android_unit_test_results.xml"
}

deleteDist.dependsOn(buildapk)
deletePreviousResultXml.dependsOn(deleteDist)
installApk.dependsOn(deletePreviousResultXml)
startInstalledApk.dependsOn(installApk)
createDistFolder.dependsOn(startInstalledApk)
waitForUnitTestResultFile.dependsOn(createDistFolder)
copyResultToDist.dependsOn(waitForUnitTestResultFile)
deleteRootLevelResult.dependsOn(copyResultToDist)

task runtest {
	tasks.runJarProject.execute()
	
	dependsOn deleteRootLevelResult
}